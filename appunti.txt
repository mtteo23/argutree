create or replace function get_argument_descendants(p_head_id int)
returns table (
  id int,
  "Parent" int,
  "Assertion" text,
  "Reasoning" text
) as $$
  with recursive descendants as (
    -- Start from the head argument
    select id, "Parent", "Assertion", "Reasoning"
    from "Argument"
    where id = p_head_id

    union all

    -- Recursively join to get children
    select a.id, a."Parent", a."Assertion", a."Reasoning"
    from "Argument" a
    inner join descendants d on a."Parent" = d.id
  )
  -- Optionally, exclude the head argument itself:
  select id, "Parent", "Assertion", "Reasoning"
  from descendants
$$ language sql stable;


create or replace function get_evidence_for_argument_descendants(p_head_id int)
returns table (
  evidence_id int,
  argument_id int,
  "Explanation" text,
  "Source" text
) as $$
  with recursive descendants as (
    -- Start with the head argument
    select id
    from "Argument"
    where id = p_head_id

    union all

    -- Recursively join to get children
    select a.id
    from "Argument" a
    inner join descendants d on a."Parent" = d.id
  )
  select e.id as evidence_id,
         e."Parent" as argument_id,
         e."Explanation" as "Explanation",
         e."Source" as "Source"
  from "Evidence" e
  inner join descendants d on e."Parent" = d.id;
$$ language sql stable;


create or replace function get_head_argument(p_arg_id bigint)
returns int as $$
declare
  v_head int;
begin
  -- If the current argument is a head (no parent), return its id.
  select id into v_head
  from "Argument"
  where id = p_arg_id and "Parent" is null;

  if v_head is not null then
    return v_head;
  else
    -- Otherwise, get the parent of the current argument and recurse.
    return get_head_argument((select "Parent" from "Argument" where id = p_arg_id));
  end if;
end;
$$ language plpgsql stable;


create policy "Enable ... for users based on user_id"
on "public"."Argument"
as PERMISSIVE
to public
using (
   (auth.uid() = ( SELECT "User".user_id
   FROM "User"
  WHERE ("User".id = ( SELECT "Tree"."user"
           FROM "Tree"
          WHERE ("Tree".head = get_head_argument("Argument".id))
          )
        )
      )
    )
);

CREATE OR REPLACE FUNCTION create_tree_and_argument(
    p_name text
) RETURNS void AS $$
DECLARE
    new_argument_id bigint;
    authenticated_user_id bigint;
BEGIN
    -- Get the authenticated user's ID
    SELECT id INTO authenticated_user_id 
    FROM "User" 
    WHERE user_id = auth.uid()::uuid;

    -- Check if the authenticated user exists
    IF authenticated_user_id IS NULL THEN
        RAISE EXCEPTION 'Authenticated user not found: %', auth.uid();
    END IF;

    -- Insert a new Argument
    INSERT INTO "Argument" ("Assertion", "Reasoning")
    VALUES ('Assertion', 'Reasoning')
    RETURNING id INTO new_argument_id;

    -- Insert a new Tree with the new Argument ID and authenticated user ID
    INSERT INTO "Tree" ("user", head, name, public)
    VALUES (authenticated_user_id, new_argument_id, p_name, TRUE);
END;
$$ LANGUAGE plpgsql;
	
	
CREATE POLICY "Enable delete for users based on user_id" 
ON "public"."Tree" 
AS PERMISSIVE 
FOR DELETE 
TO public 
USING (
    auth.uid() = (
        SELECT "User".user_id
        FROM "User"
        WHERE "User".id = "Tree".user
    )
);

CREATE POLICY "Enable update for users based on user_id" 
ON "public"."Tree" 
AS PERMISSIVE 
FOR UPDATE 
TO public 
USING (
    auth.uid() = (
        SELECT "User".user_id
        FROM "User"
        WHERE "User".id = "Tree".user
    )
);
